?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
c("Bill", "Gina", "Kelly", "Sean")
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(parients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
T && c(T, F, F)
T && c(T, F, F)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
isTRUE(3)
identical("twins", "twins")
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function("My first function!")
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, 6)
evaluate(function(x){x[1]}, c(8,4, 0))
evaluate(function(x){x[length(x)]}, c(8,4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("The cheese is in the fridge")
submit()
mad_libs(place = "Cambridge", "angry", "statue")
submit()
"I" %p% "love" %p% "R!"
head(falgs)
head(flags)
dim(flags)
viewinfo(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sappply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique,vals, function(elem), elem[2])
lapply(unique,vals, function(elem) elem[2])
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(falgs$animate, flags$landmass, mean)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
?str
library(datasets)
?datasets
library(help = "datasets")
data <- airquality
head(data[[3]])
ranking <- data[order(data[[3]]),]
ranking <- data[order(data[["Wind"]]),]
?airquality
makeVector <- function(x = numeric()) {
m <- NULL
underlyingVector <- x
set <- function(y) {
underlyingVector <<- y
m <<- NULL
}
get <- function() underlyingVector
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get, setmean = setmean, getmean = getmean)
}
x <- 1:5
v <- makeVector(x)
v$get()
rm(x)
v$get()
rm(v)
x <- 1:5
v <- makeVector(x)
rm(x)
v$get()
?sample
getwd()
x <- Null
x <- null
x <- NULL
x
inv<-Null
load(swirl)
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
rbinom(100, size = 1, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
rpos(5, 10)
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
montH(t1)
month(t2)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
help(cars)
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist)
plot(x = cars$speed, y = cars$dist, xlabel = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
?par
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
?points
plot(cars, pch = 2)
load(mtcars)
dataO t
data(MTCARS)
data(mtcars)
?boxplot
boxplot(mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
install.packages("httpuv")
library(dplyr)
install.packages("dplyr")
source('~/Coursera/Data Science Specialisation/Getting and Cleaning Data/Week 3/Quiz/Q1.R')
pwd()
getwd()
setwd('~/Coursera/Data Science Specialisation/Getting and Cleaning Data/Week 3/Quiz')
source('~/Coursera/Data Science Specialisation/Getting and Cleaning Data/Week 3/Quiz/Q1.R')
agricultureLogical <- data.ACR == 3 & data.AGS == 6
agricultureLogical <- data$ACR == 3 & data$AGS == 6
dim(which(agricultureLogical))
x <- which(agricultureLogical)
head(x)
install.packages("jpeg")
library("jpeg")
help(readJPEG)
source('~/Coursera/Data Science Specialisation/Getting and Cleaning Data/Week 3/Quiz/Q2.R')
img <- readJPEG("jeff.jpg", native=TRUE)
img <- readJPEG("jeff.jpg", native=TRUE)
summary(img)
str(img)
dim(img)
source('~/Coursera/Data Science Specialisation/Getting and Cleaning Data/Week 3/Quiz/Q2.R')
help("quantile")
quantile(img, c(0.3, 0.8)
)
source('~/Coursera/Data Science Specialisation/Getting and Cleaning Data/Week 3/Quiz/Q3.R')
source('~/Coursera/Data Science Specialisation/Getting and Cleaning Data/Week 3/Quiz/Q3.R')
names(edu)
names(gdp)
head(gdp$X)
head(edu$CountryCode)
library(dplyr)
margedData <- merge(gdp, edu, by.x="X", by.y = "CountryCode")
View(margedData)
arrange(mergedData, desc(Gross.domestic.product.2012))
rename(mergedData = margedData)
mergedData <- margedData
arrange(mergedData, desc(Gross.domestic.product.2012))
mergedData <- arrange(mergedData, desc(Gross.domestic.product.2012))
margedData(13,"Long.Name")
mergedData(13,"Long.Name")
mergedData(13,)
head(mergedData, 13)
mergedData <- mutate(mergedData, GDP = as.numeric(Gross.domestic.product.2012))
mergedData <- arrange(mergedData, desc(GDP))
head(mergedData, 13)
tail(select(mergedData, c(Short.Name, GDP)))
head(select(margedData, c(Short.Name, Gross.domestic.product.2012)))
source('~/Coursera/Data Science Specialisation/Getting and Cleaning Data/Week 3/Quiz/Q3.R')
source('~/Coursera/Data Science Specialisation/Getting and Cleaning Data/Week 3/Quiz/Q3.R')
gdpRanks <- data$Gross.domestic.product.2012
str(gdpRanks)
levels(gdpRanks)
gdpRaw <- gdpRanks
gdpRanks <- as.numeric(as.character(gdpRaw))
source('~/Coursera/Data Science Specialisation/Getting and Cleaning Data/Week 3/Quiz/Q3.R')
x <- is.na(data$gdpRank)
x <- !is.na(data$gdpRank)
data <- data(x, )
which(x)
source('~/Coursera/Data Science Specialisation/Getting and Cleaning Data/Week 3/Quiz/Q3.R')
source('~/Coursera/Data Science Specialisation/Getting and Cleaning Data/Week 3/Quiz/Q3.R')
source('~/Coursera/Data Science Specialisation/Getting and Cleaning Data/Week 3/Quiz/Q3.R')
source('~/Coursera/Data Science Specialisation/Getting and Cleaning Data/Week 3/Quiz/Q3.R')
ind <- which(!is.na(mergedData$gdpRank))
cleanData <- mergedData(ind,)
cleanData <- mergedData[ind,]
arrange(cleanData, desc(gdpRank))
cleanData <- arrange(cleanData, desc(gdpRank))
head(select(cleanData, c(Short.Name, gdpRank)))
head(select(cleanData, c(Short.Name, gdpRank)), 13)
cleanData <- select(margedData, !is.na(gdpRank))
cleanData <- select(mergedData, !is.na(gdpRank))
cleanData <- select(mergedData, which(!is.na(gdpRank))
)
source('~/Coursera/Data Science Specialisation/Getting and Cleaning Data/Week 3/Quiz/Q3.R')
source('~/Coursera/Data Science Specialisation/Getting and Cleaning Data/Week 3/Quiz/Q3.R')
head(select(cleanData, c(Short.Name, gdpRank)), 13)
tail(select(cleanData, c(Short.Name, gdpRank)))
levels(eduData$Income.Group)
cleanData %>% group_by(Income.Group) %>% avgGDP = mean(gdpRank, na.rm = TRUE)
incGrps <- group_by(cleanData, Income.Group)
cleanData %>% group_by(Income.Group) %>% summarise(avgGDP = mean(gdpRank, na.rm = TRUE))
highOECD <- cleanData$Income.Group = "High income: OECD"
highOECD <- (cleanData$Income.Group = "High income: OECD")
highOECD <- (cleanData$Income.Group == "High income: OECD")
tail(highOECD)
sum(highOECD)
View(cleanData)
View(cleanData)
source('~/Coursera/Data Science Specialisation/Getting and Cleaning Data/Week 3/Quiz/Q3.R')
View(cleanData)
highOECD <- (cleanData$Income.Group == "High income: OECD")
highNonOECD <- (cleanData$Income.Group == "High income: nonOECD")
mean(cleanData[highOECD, "gdpRank"])
mean(cleanData[highNonOECD, "gdpRank"])
install.packages("Hmisc")
library(Hmisc)
cleanData$gdpGroups <- cut2(cleanData$gdpRank, g=5)
table(cleanData$gdpGroups, cleanData$Income.Group)
setwd("~/Coursera/Data Science Specialisation/Getting and Cleaning Data/Week 3/getdataassignment")
test <- read.table("UCI HAR Dataset\subject_test")
test <- read.table("UCI HAR Dataset\\subject_test")
test <- read.table("UCI HAR Dataset/subject_test")
test <- read.table("UCI HAR Dataset/subject_test.txt")
test <- read.table("UCI HAR Dataset/test/subject_test")
test <- read.table("UCI HAR Dataset/test/subject_test.txt")
View(test)
subjectTest <- read.table("UCI HAR Dataset/test/subject_test.txt")
testX <- read.table("UCI HAR Dataset/test/X_test.txt")
remove(test)
View(testX)
testY <- read.table("UCI Har Dataset/test/Y_test.txt")
activityLabels <- read.table("data/activity_lables.txt")
activityLabels <- read.table("data/activity_labels.txt")
features <- read.table("data/features.txt")
View(features)
featuresInfo <- read.table("data/features_info.txt")
source('~/Coursera/Data Science Specialisation/Getting and Cleaning Data/Week 3/getdataassignment/run_analysis.R')
source('~/Coursera/Data Science Specialisation/Getting and Cleaning Data/Week 3/getdataassignment/run_analysis.R')
View(features)
View(testSubject)
str(features)
str(testSubject)
str(trainSubject)
str(factor(testSubject))
str(as.factor(testSubject))
str(as.factor(testSubject$V1))
str(as.factor(trainSubject$V1))
View(activityLabels)
View(features)
View(testSubject)
sum(testSubject$V1==2)
sum(testSubject$V1==4)
sum(testSubject$V1==6)
sum(testSubject$V1==5)
sum(testSubject$V1==9)
View(testX)
View(trainSubject)
View(testY)
test <- cbind(testSubject, testY, testX)
train <- cbind(trainSubject, trainY, trainX)
allData <- rbind(test, train)
View(features)
varNames <- make.names(features$V2)
head(varNames)
tail(varNames)
meanStdInd <- grepl("mean|std", varNames, ignore.case = TRUE)
head(meanStdInd)
tail(meanStdInd)
head(meanStdInd, 8)
meanStdLogical <- meanStdInd
meanStdInd <- where(meanStdLogical)
meanStdInd <- which(meanStdLogical)
sum(meanStdLogical)
meanStdInd <- meanStdInd + 2
c(c(1, 4, 5), 9, 10)
extractedData <- allData[,c(meanStdInd, 562, 563)]
dim(names(extractedData))
names(extractedData)
names(extractedData) <- c(varNames(meanStdInd), "subject", "activityID")
names(extractedData) <- c(varNames[meanStdInd], "subject", "activityID")
str(varNames)
summary(varNames)
dim(varNames)
nrow(varNames)
tail(varNames)
tail(names(extractedData))
test <- cbind(testX, testY, testSubject)
source('~/Coursera/Data Science Specialisation/Getting and Cleaning Data/Week 3/getdataassignment/run_analysis.R')
nrow(varNames[meanStdInd])
test <- cbind(testX, subject = testY, activityID = testSubject)
tail(names(test))
head(names(test))
test <- cbind(testX, subject = testY, activityID = testSubject)
tail(names(test))
test <- cbind(testX, testY, testSubject)
tail(names(test))
remove(test, train, allData)
remove(varNames, meanStdInd,meanStdLogical, extractedData)
test <- cbind(testX, testY, testSubject)
tail(names(test))
train <- cbind(trainX, subject = trainSubject, activityID = trainY)
tail(names(train))
varNames <- make.names(features$V2)
names(testX) <- varNames
names(trainX) <- varNames
names(testX) <- "activity.ID"
names(trainX) <- "activity.ID"
names(testSubject) <- "subject.ID"
names(trainSubject) <- "subject.ID"
# Merge data into one table
test <- cbind(testX, testY, testSubject)
train <- cbind(trainX, subject = trainSubject, activityID = trainY)
allData <- rbind(test, train)
test <- cbind(testX, testY, testSubject)
train <- cbind(trainX, trainSubject, trainY)
asdf <- matrix(1:1022, nrow = 2, ncol = 561)
View(asdf)
asdf <- matrix(1:1122, nrow = 2, ncol = 561)
asdf <- as.data.frame(asdf)
names(asdf) <- varNames
names(testX) <- varNames
names(trainX) <- varNames
names(testY) <- "activity.ID"
names(trainY) <- "activity.ID"
View(testX)
names(testSubject) <- "subject.ID"
names(trainSubject) <- "subject.ID"
test <- cbind(testX, testY, testSubject)
train <- cbind(trainX, trainSubject, trainY)
allData <- rbind(test, train)
test <- cbind(testX, testSubject, testY)
train <- cbind(trainX, trainSubject, trainY)
allData <- rbind(test, train)
tail(names(allData))
meanStdLogical <- grepl("mean..|std..", varNames, ignore.case = TRUE)
meanStdInd <- which(meanStdLogical)
extractedData <- allData[,c(meanStdInd, 562, 563)]
remove(asdf)
View(extractedData)
meanStdLogical <- grepl("mean\.\.|std\.\.", varNames, ignore.case = TRUE)
meanStdLogical <- grepl("mean\.\.|std\.\.", features$V2, ignore.case = TRUE)
meanStdLogical <- grepl("mean()|std()", features$V2, ignore.case = TRUE)
sum(meanStdLogical)
meanStdInd <- which(meanStdLogical)
extractedData <- allData[,c(meanStdInd, 562, 563)]
meanStdLogical <- grepl("mean\(\)|std\(\)", features$V2, ignore.case = TRUE)
meanStdLogical <- grepl("mean\\(\\)|std\\(\\)", features$V2, ignore.case = TRUE)
meanStdInd <- which(meanStdLogical)
extractedData <- allData[,c(meanStdInd, 562, 563)]
names(activityLabels) <- c("activity.ID", "activity.Name")
library(dplyr)
tidyData <- left_join(extractedData, activityLabels, by = "activity.ID")
View(tidyData)
labelledData <- left_join(extractedData, activityLabels, by = "activity.ID")
remove(tideData)
remove(tidyData)
groupedData <- group_by(labelledData, activity.Name, subject.ID)
summarise(groupedData)
tidyData <- summarise(groupedData)
tidyData <- summarise_each(groupedData, funs(mean))
View(tidyData)
labelledData <- select(labelledData, -(activity.ID))
tidyData <- summarise_each(groupedData, funs(mean))
groupedData <- group_by(labelledData, activity.Name, subject.ID)
tidyData <- summarise_each(groupedData, funs(mean))
head(varNames)
gsub("..", "", varNames)
gsub("\\.\\.", "", varNames)
View(features)
write.table("tidyData.txt")
write.table(tidyData,"tidyData.txt")
getwd()
write.table(tidyData,"tidyData.txt", row.names = FALSE)
myData <- read.table("tidayData.txt")
myData <- read.table("tidyData.txt")
myData <- read.table("tidyData.txt", header = TRUE)
View(myData)
source('~/Coursera/Data Science Specialisation/Getting and Cleaning Data/Week 3/getdataassignment/run_analysis.R')
write.table(tidyData,"tidyData.txt", row.names = FALSE)
myData <- read.table("tidyData.txt", header = TRUE)
View(myData)
names(myData)
write.table(names(myData), "names.txt")
write.table(names(myData), "names.txt", quote = FALSE, row.names = FALSE)
write.table(tidyData,"smartphoneData.txt", row.names = FALSE)
promptData(myData, "doc.Rd")
write.table(names(myData), "names.txt", quote = FALSE, row.names = FALSE)
